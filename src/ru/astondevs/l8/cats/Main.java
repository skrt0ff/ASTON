package ru.astondevs.l8.cats;

public class Main {
    public static void main(String[] args) {
        /*Задание 1:

        Создать классы Собака и Кот с наследованием от класса Животное.

        Все животные могут бежать и плыть.
        В качестве параметра каждому методу передается длина препятствия.
        Результатом выполнения действия будет печать в консоль.
        (Например, dogBobik.run(150); -> 'Бобик пробежал 150 м.');

        У каждого животного есть ограничения на действия
        (бег: кот 200 м., собака 500 м.; плавание: кот не умеет плавать, собака 10 м.).

        Добавить подсчет созданных котов, собак и животных.

        Расширить задачу, добавив для котов возможность кушать из миски, выполнив следующие пункты:
        Сделать так, чтобы в миске с едой не могло получиться отрицательного количества еды
        (например, в миске 10 еды, а кот пытается покушать 15-20).
        Каждому коту нужно добавить поле сытость (когда создаем котов, они голодны).
        Если коту удалось покушать (хватило еды), сытость = true.
               Считаем, что если коту мало еды в миске, то он её просто не трогает,
               то есть не может быть наполовину сыт (это сделано для упрощения логики программы).
        Создать массив котов и миску с едой,
        попросить всех котов покушать из этой миски и потом вывести информацию о сытости котов в консоль.
                Добавить метод, с помощью которого можно было бы добавлять еду в миску.*/

        Animal animal1 = new Animal("Жираф");
        animal1.Running(10);

        Dog bobik = new Dog("Бобик");
        bobik.Running(500);
        bobik.Swimming(10);

        Dog sharik = new Dog("Шарик");
        sharik.Running(501);
        sharik.Swimming(11);
        sharik.Running(0);

        /*Cat persik = new Cat("Персик");
        persik.Running(0);
        persik.Swimming();

        Cat barsik = new Cat("Барсик");
        barsik.Running(201);
        barsik.Swimming();*/

        System.out.println("Всего котов создано: " + Cat.getCountCats());
        System.out.println("Всего собак создано: " + Dog.getCountDogs());
        System.out.println("Всего животных создано: " + Animal.getCountAnimals());
        System.out.println("\n");

        Plate plate = new Plate(100);
        Cat[] cats = new Cat[3]; //Создаем массив из трех котов
        cats[0] = new Cat("Персик", 300);
        cats[1] = new Cat("Барсик", 50);
        cats[2] = new Cat("Гарфилд", 60);

        for (Cat cat : cats) { //Создаем цикл for для массива
             if(plate.getFood() <= 0) { //Если в миске нет еды
                System.out.println("Добавьте в миску побольше еды! ");
                plate.addFood(500); //Добавляем еду в миску
             } else {
                if(plate.checkFood(cat.getAppetite())) { //Проверка отрицательного количества еды
                    plate.decreaseFood(cat.getAppetite()); //Вычитыем съеденную еду
                    cat.changeSatiety(); //Меняем поле сытости на true
                    System.out.println("Кот " + cat.getName() + " сыт");
                } else {
                    System.out.println("Кот " + cat.getName() + " голоден"); //Считаем, что кот голоден
                }
             }

        }
    }
}
